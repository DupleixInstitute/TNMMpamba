<html>

<head>
    <script type="text/javascript" src="jquery-3.5.1.js"></script>
	<script>
        $(function()
		    {
				//Load Data
				
				LoadData();
				
				RecalculateLiquidityRatios(document.forms["FinancialAnalysisForm"]["CurrentRatioWeight"]);
				RecalculateProfitabilityRatios(document.forms["FinancialAnalysisForm"]["CurrentRatioWeight"]);
				RecalculateCapitalStructureRatios(document.forms["FinancialAnalysisForm"]["CurrentRatioWeight"]);
				RecalculateDebtServiceRatios(document.forms["FinancialAnalysisForm"]["CurrentRatioWeight"]);
				RecalculateFinancialAnalysisWeights(document.forms["FinancialAnalysisForm"]["CurrentRatioWeight"]);
				LoadFinancialAnalysisMainWeights(document.forms["FinancialAnalysisForm"]["CurrentRatioWeight"]);
				sfRecalculate(document.forms["FinancialAnalysisForm"]["CurrentRatioWeight"]);
				bfRecalculate(document.forms["FinancialAnalysisForm"]["CurrentRatioWeight"]);
				
				
			}); 
		function LoadFinancialAnalysisMainWeights()
		
		{
              // Loading Big Firms Data
			  document.forms["FinancialAnalysisForm"]["bfFinancialAnalysisPercentage"].value = ToNumber(localStorage.bfFinancialAnalysis);
		      document.forms["FinancialAnalysisForm"]["bfManagementAnalysisPercentage"].value = ToNumber(localStorage.bfManagementAnalysis);
		      document.forms["FinancialAnalysisForm"]["bfIndustryAnalysisPercentage"].value = ToNumber(localStorage.bfIndustryAnalysis);
		      document.forms["FinancialAnalysisForm"]["bfShareholderAnalysisPercentage"].value = ToNumber(localStorage.bfShareholderAnalysis);
		      document.forms["FinancialAnalysisForm"]["bfEstablishmentAnalysisPercentage"].value = ToNumber(localStorage.bfEstablishmentAnalysis);
		      document.forms["FinancialAnalysisForm"]["bfTotalScore"].value = ToNumber(localStorage.bfTotalScore);
		      // Loading Small Firsm Data
              document.forms["FinancialAnalysisForm"]["sfFinancialAnalysisPercentage"].value = ToNumber(localStorage.sfFinancialAnalysis) ;
		      document.forms["FinancialAnalysisForm"]["sfManagementAnalysisPercentage"].value = ToNumber(localStorage.sfManagementAnalysis);
		      document.forms["FinancialAnalysisForm"]["sfIndustryAnalysisPercentage"].value = ToNumber(localStorage.sfIndustryAnalysis);
		      document.forms["FinancialAnalysisForm"]["sfShareholderAnalysisPercentage"].value = ToNumber(localStorage.sfShareholderAnalysis);
		      document.forms["FinancialAnalysisForm"]["sfEstablishmentAnalysisPercentage"].value = ToNumber(localStorage.sfEstablishmentAnalysis);
		      document.forms["FinancialAnalysisForm"]["sfTotalScore"].value = ToNumber(localStorage.bfTotalScore);
		  }
		
		function SaveData()
		
		{   
			  //Saving Financial Analysis Category Weights  
			  
			  localStorage.LiquidityCategoryWeight = document.forms["FinancialAnalysisForm"]["LiquidityCategoryWeight"].value;
		      localStorage.ProfitabilityCategoryWeight = document.forms["FinancialAnalysisForm"]["ProfitabilityCategoryWeight"].value;
			  localStorage.CapitalStructureCategoryWeight = document.forms["FinancialAnalysisForm"]["CapitalStructureCategoryWeight"].value;
			  localStorage.DebtServiceCategoryWeight = document.forms["FinancialAnalysisForm"]["DebtServiceCategoryWeight"].value;
		
			  //Saving Liquidity Metrics
			  localStorage.CurrentRatioWeight = Number(document.forms["FinancialAnalysisForm"]["CurrentRatioWeight"].value);
		      localStorage.DebtorDaysWeight = Number(document.forms["FinancialAnalysisForm"]["DebtorDaysWeight"].value);
		      localStorage.TurnoverToWorkingCapitalWeight = Number(document.forms["FinancialAnalysisForm"]["TurnoverToWorkingCapitalWeight"].value);
		      localStorage.TurnoverToWorkingCapitalWeight = Number(document.forms["FinancialAnalysisForm"]["TurnoverToWorkingCapitalWeight"].value);  
              //Saving Profitability Metrics
			  localStorage.GrossProfitMarginWeight = Number(document.forms["FinancialAnalysisForm"]["GrossProfitMarginWeight"].value);
		      localStorage.OperatingProfitMarginWeight = Number(document.forms["FinancialAnalysisForm"]["OperatingProfitMarginWeight"].value);
		      localStorage.TurnoverGrowthWeight = Number(document.forms["FinancialAnalysisForm"]["TurnoverGrowthWeight"].value);
		      localStorage.ReturnOnAssetsWeight = Number(document.forms["FinancialAnalysisForm"]["ReturnOnAssetsWeight"].value);
		      localStorage.ReturnOnInvestmentsWeight = Number(document.forms["FinancialAnalysisForm"]["ReturnOnInvestmentsWeight"].value);
              //Saving Capital Structure Metrics
			  localStorage.DebtToEquityWeight = Number(document.forms["FinancialAnalysisForm"]["DebtToEquityWeight"].value);
		      localStorage.DebtToTangibleNetWorthWeight = Number(document.forms["FinancialAnalysisForm"]["DebtToTangibleNetWorthWeight"].value);
		 	  localStorage.TotalShareholdersFundsToTotalAssetsWeight = Number(document.forms["FinancialAnalysisForm"]["TotalShareholdersFundsToTotalAssetsWeight"].value);  
              //Saving Debt Service Metrics 
			  localStorage.InterestCoverWeight = Number(document.forms["FinancialAnalysisForm"]["InterestCoverWeight"].value);
		      localStorage.EBITDAToGrossIntDebtsWeight = Number(document.forms["FinancialAnalysisForm"]["EBITDAToGrossIntDebtsWeight"].value);  
              //alert successfull save operation
			  alert("Settings successfully saved");
		}
       
	   function ToNumber(nStr) 
		{
	      //alert (IsNan(nStr));
		  if (nStr == "infinity")
		     {
		       return 0;
		     }
		  else
		     {  
			   if   (typeof(nStr) == "undefined")
		            {  return 0;}
		       else  
		            {
		            if (nStr == "") {return 0};
		            if (nStr != "") {return parseFloat(nStr.replace(/,/g,''))};
		            }
	         }  
	    }
	   function LoadData()
		
		{   
			 
			 
			 
			 //Loading Financial Analysis Category Weights  
			  
			  document.forms["FinancialAnalysisForm"]["LiquidityCategoryWeight"].value = ToNumber(localStorage.LiquidityCategoryWeight);
		      document.forms["FinancialAnalysisForm"]["ProfitabilityCategoryWeight"].value = ToNumber(localStorage.ProfitabilityCategoryWeight);
			  document.forms["FinancialAnalysisForm"]["CapitalStructureCategoryWeight"].value = ToNumber(localStorage.CapitalStructureCategoryWeight);
			  document.forms["FinancialAnalysisForm"]["DebtServiceCategoryWeight"].value = ToNumber(localStorage.DebtServiceCategoryWeight);
			  
			 //Loading Liquidity Metrics
			  document.forms["FinancialAnalysisForm"]["CurrentRatioWeight"].value = ToNumber(localStorage.CurrentRatioWeight);
		      document.forms["FinancialAnalysisForm"]["DebtorDaysWeight"].value = ToNumber(localStorage.DebtorDaysWeight);
		      document.forms["FinancialAnalysisForm"]["TurnoverToWorkingCapitalWeight"].value = ToNumber(localStorage.TurnoverToWorkingCapitalWeight);
		      document.forms["FinancialAnalysisForm"]["TurnoverToWorkingCapitalWeight"].value = ToNumber(localStorage.TurnoverToWorkingCapitalWeight);  
              //Loading Profitability Metrics
			  document.forms["FinancialAnalysisForm"]["GrossProfitMarginWeight"].value = ToNumber(localStorage.GrossProfitMarginWeight);
		      document.forms["FinancialAnalysisForm"]["OperatingProfitMarginWeight"].value = ToNumber(localStorage.OperatingProfitMarginWeight);
		      document.forms["FinancialAnalysisForm"]["TurnoverGrowthWeight"].value = ToNumber(localStorage.TurnoverGrowthWeight);
		      document.forms["FinancialAnalysisForm"]["ReturnOnAssetsWeight"].value = ToNumber(localStorage.ReturnOnAssetsWeight);
		      document.forms["FinancialAnalysisForm"]["ReturnOnInvestmentsWeight"].value = ToNumber(localStorage.ReturnOnInvestmentsWeight);
              //Loading Capital Structure Metrics
			  document.forms["FinancialAnalysisForm"]["DebtToEquityWeight"].value = ToNumber(localStorage.DebtToEquityWeight);
		      document.forms["FinancialAnalysisForm"]["DebtToTangibleNetWorthWeight"].value = ToNumber(localStorage.DebtToTangibleNetWorthWeight);
		 	  document.forms["FinancialAnalysisForm"]["ShareholdersFundsToTotalAssetsWeight"].value = ToNumber(localStorage.TotalShareholdersFundsToTotalAssetsWeight);  
              //Loading Debt Service Metrics 
			  document.forms["FinancialAnalysisForm"]["InterestCoverWeight"].value = ToNumber(localStorage.InterestCoverWeight);
		      document.forms["FinancialAnalysisForm"]["EBITDAToGrossIntDebtsWeight"].value = ToNumber(localStorage.EBITDAToGrossIntDebtsWeight);  
             
		}
     
		
		function RecalculateFinancialAnalysisWeights(elem)
		{
           if (isNaN(elem.value))
		   {
		     alert ("Please enter numbers only");
			 elem.value =""; 
		   }
           else
		   {
		      //Open Financial Analysis Table from database transfer to temporary variables
              TotalScore = ToNumber(localStorage.bfTotalScore);
			  FinancialCategoryWeight =ToNumber(localStorage.bfFinancialAnalysis);
			  //Convert Financial Analysis Category Weights on document to numbers and hold in temproary variables
			  var LiquidityCategoryWeight = Number(document.forms["FinancialAnalysisForm"]["LiquidityCategoryWeight"].value);
		      var ProfitabilityCategoryWeight = Number(document.forms["FinancialAnalysisForm"]["ProfitabilityCategoryWeight"].value);
		      var CapitalStructureCategoryWeight = Number(document.forms["FinancialAnalysisForm"]["CapitalStructureCategoryWeight"].value);
		 	  var TotalFinancialAnalysisRatiosInputsOnly = LiquidityCategoryWeight + ProfitabilityCategoryWeight + CapitalStructureCategoryWeight;
		      var Balancing = 100 - TotalFinancialAnalysisRatiosInputsOnly;
      	
			  
			  if (TotalFinancialAnalysisRatiosInputsOnly > 100)
		      {
		         alert("Total score may not exceed 100%");
				 elem.value = "";
				 
		      }
              else  
			    
			  {
			     //Calculate Score Allocation = Total Score X Financial Category Weight X Sub-category Weight 
			     
				 var LiquidityCategoryScore = TotalScore * FinancialCategoryWeight * LiquidityCategoryWeight/10000;
				 var ProfitabilityCategoryScore = TotalScore * FinancialCategoryWeight * ProfitabilityCategoryWeight/10000;
				 var CapitalStructureCategoryScore = TotalScore * FinancialCategoryWeight * CapitalStructureCategoryWeight/10000;
				 var DebtServiceCategoryScore = TotalScore * FinancialCategoryWeight * Balancing/10000;
				 var TotalFinancialAnalysisCategoryScore = LiquidityCategoryScore + ProfitabilityCategoryScore + CapitalStructureCategoryScore + DebtServiceCategoryScore;
				 
				
				 //Display Total Scores
			     document.forms["FinancialAnalysisForm"]["LiquidityCategoryScore"].value = LiquidityCategoryScore;
                 document.forms["FinancialAnalysisForm"]["ProfitabilityCategoryScore"].value = ProfitabilityCategoryScore;
				 document.forms["FinancialAnalysisForm"]["CapitalStructureCategoryScore"].value = CapitalStructureCategoryScore;
				 document.forms["FinancialAnalysisForm"]["DebtServiceCategoryScore"].value = DebtServiceCategoryScore;
				 document.forms["FinancialAnalysisForm"]["TotalFinancialAnalysisCategoryScore"].value = TotalFinancialAnalysisCategoryScore;
				
				
				
				 document.forms["FinancialAnalysisForm"]["DebtServiceCategoryWeight"].value =Balancing;  
                
				//Recalculate and Display Effective Weights =  Total Score / Sub-Category Score
				
				//Recalculate avoiding division by zero infinity error
				  LiquidityEffWeight = LiquidityCategoryScore/TotalScore * 100;
				  ProfitabilityEffWeight = ProfitabilityCategoryScore/TotalScore * 100;
				  CapitalStructureEffWeight = CapitalStructureCategoryScore/TotalScore * 100;
			      DebtServiceEffWeight = DebtServiceCategoryScore/TotalScore * 100;
				  TotalFinCatEffWeight = TotalFinancialAnalysisCategoryScore/TotalScore * 100;
			
			    //Display effective weights
				 document.forms["FinancialAnalysisForm"]["LiquidityCategoryEffectiveWeight"].value = LiquidityEffWeight;
                 document.forms["FinancialAnalysisForm"]["ProfitabilityCategoryEffectiveWeight"].value = ProfitabilityEffWeight;
                 document.forms["FinancialAnalysisForm"]["CapitalStructureCategoryEffectiveWeight"].value = CapitalStructureEffWeight;
                 document.forms["FinancialAnalysisForm"]["DebtServiceCategoryEffectiveWeight"].value = DebtServiceEffWeight;
                 document.forms["FinancialAnalysisForm"]["TotalFinancialAnalysisCategoryEffectiveWeight"].value = TotalFinCatEffWeight;
				
			   
			  }
			}
		}
		
		function RecalculateLiquidityRatios(elem)
		{
           if (isNaN(elem.value))
		   {
		     alert ("Please enter numbers only");
			 elem.value =""; 
		   }
           else
		   {
		      var CurrentRatioWeight = Number(document.forms["FinancialAnalysisForm"]["CurrentRatioWeight"].value);
		      var DebtorDaysWeight = Number(document.forms["FinancialAnalysisForm"]["DebtorDaysWeight"].value);
		      var TurnoverToWorkingCapitalWeight = Number(document.forms["FinancialAnalysisForm"]["TurnoverToWorkingCapitalWeight"].value);
		 	  var TotalLiquityRatiosInputsOnly = CurrentRatioWeight + DebtorDaysWeight;
		      var Balancing = 100 - TotalLiquityRatiosInputsOnly;
			  
			  
			  
			  if (TotalLiquityRatiosInputsOnly > 100)
		      {
		         alert("Total score may not exceed 100%");
				 elem.value = "";
				 
		      }
              else  
			    // Display Total Score;
			  {
			     document.forms["FinancialAnalysisForm"]["TurnoverToWorkingCapitalWeight"].value =Balancing;  
                 //Calculate Score Allocation = Total Score X Financial Category Weight X Sub-category Weight 
			     TotalScore = ToNumber(localStorage.bfTotalScore);
				 LiquidityCategoryScore = ToNumber(document.forms["FinancialAnalysisForm"]["LiquidityCategoryScore"].value);
             
				 var CurrentRatioScore = LiquidityCategoryScore * CurrentRatioWeight/100;
				 var DebtorDaysScore = LiquidityCategoryScore * DebtorDaysWeight/100;
				 var TotalLiquidityRatiosScoreBeforeLast = CurrentRatioScore + DebtorDaysScore;
				 var TurnoverToWorkingCapitalScore = LiquidityCategoryScore - TotalLiquidityRatiosScoreBeforeLast;
				 
				
				 //Display Total Scores
			     document.forms["FinancialAnalysisForm"]["CurrentRatioScore"].value = CurrentRatioScore;
                 document.forms["FinancialAnalysisForm"]["DebtorDaysScore"].value = DebtorDaysScore;
				 document.forms["FinancialAnalysisForm"]["TurnoverToWorkingCapitalScore"].value = TurnoverToWorkingCapitalScore;
				 document.forms["FinancialAnalysisForm"]["TotalLiquidityRatiosScore"].value = LiquidityCategoryScore;
				
				
				
				 //document.forms["FinancialAnalysisForm"]["DebtServiceCategoryWeight"].value =Balancing;  
                
				//Recalculate and Display Effective Weights =  Total Score / Sub-Category Score
				
				//
				CurrentRatioEffWeight = CurrentRatioScore /TotalScore * 100;
				DebtorDaysEffWeight = DebtorDaysScore/TotalScore * 100;
				TurnoverToWorkingCapitalEffWeight = TurnoverToWorkingCapitalScore/TotalScore * 100;
				TotalLiquidityRatiosEffWeight = LiquidityCategoryScore/TotalScore * 100;
			
			    //Display effective weights
				document.forms["FinancialAnalysisForm"]["CurrentRatioEffectiveWeight"].value = CurrentRatioEffWeight;
                document.forms["FinancialAnalysisForm"]["DebtorDaysEffectiveWeight"].value = DebtorDaysEffWeight;
                document.forms["FinancialAnalysisForm"]["TurnoverToWorkingCapitalEffectiveWeight"].value = TurnoverToWorkingCapitalEffWeight;
                document.forms["FinancialAnalysisForm"]["TotalLiquidityRatiosEffectiveWeight"].value = TotalLiquidityRatiosEffWeight;
				  }
			}
		}
        function RecalculateProfitabilityRatios(elem)
		{
           if (isNaN(elem.value))
		   {
		     alert ("Please enter numbers only");
			 elem.value =""; 
		   }
           else
		   {
		      var GrossProfitMarginWeight = Number(document.forms["FinancialAnalysisForm"]["GrossProfitMarginWeight"].value);
		      var OperatingProfitMarginWeight = Number(document.forms["FinancialAnalysisForm"]["OperatingProfitMarginWeight"].value);
		      var TurnoverGrowthWeight = Number(document.forms["FinancialAnalysisForm"]["TurnoverGrowthWeight"].value);
		      var ReturnOnAssetsWeight = Number(document.forms["FinancialAnalysisForm"]["ReturnOnAssetsWeight"].value);
		 	  var TotalProfitabilityRatiosInputsOnly = GrossProfitMarginWeight + OperatingProfitMarginWeight + TurnoverGrowthWeight + ReturnOnAssetsWeight;
		      var Balancing = 100 - TotalProfitabilityRatiosInputsOnly;
			  
			  
			  
			  if (TotalProfitabilityRatiosInputsOnly > 100)
		      {
		         alert("Total score may not exceed 100%");
				 elem.value = "";
				 
		      }
              else  
			    // Display Total Score;
			  {
			     document.forms["FinancialAnalysisForm"]["ReturnOnInvestmentsWeight"].value =Balancing;  
                 TotalScore = ToNumber(localStorage.bfTotalScore);
				 ProfitabilityCategoryScore = ToNumber(document.forms["FinancialAnalysisForm"]["ProfitabilityCategoryScore"].value);
             
				 var GrossProfitMarginScore = ProfitabilityCategoryScore * GrossProfitMarginWeight/100;
				 var OperatingProfitMarginScore = ProfitabilityCategoryScore * OperatingProfitMarginWeight/100;
				 var TurnoverGrowthScore = ProfitabilityCategoryScore * TurnoverGrowthWeight/100;
				 var ReturnOnAssetsScore = ProfitabilityCategoryScore * ReturnOnAssetsWeight/100;
		         var TotalProfitabilityRatiosScoreBeforeROI = GrossProfitMarginScore + OperatingProfitMarginScore + TurnoverGrowthScore + ReturnOnAssetsScore;
				 // The ROI being the last charecteristic is the balancing score so that sum = Total Profitability Scores
				 var ReturnOnInvestmentsScore = ProfitabilityCategoryScore - TotalProfitabilityRatiosScoreBeforeROI ;
		       
				
				 //Display Total Scores
			     document.forms["FinancialAnalysisForm"]["GrossProfitMarginScore"].value = GrossProfitMarginScore;
                 document.forms["FinancialAnalysisForm"]["OperatingProfitMarginScore"].value = OperatingProfitMarginScore;
				 document.forms["FinancialAnalysisForm"]["TurnoverGrowthScore"].value = TurnoverGrowthScore;
				 document.forms["FinancialAnalysisForm"]["ReturnOnAssetsScore"].value = ReturnOnAssetsScore;
				 document.forms["FinancialAnalysisForm"]["ReturnOnInvestmentsScore"].value = ReturnOnInvestmentsScore;
				 document.forms["FinancialAnalysisForm"]["TotalProfitabilityRatiosScore"].value = ProfitabilityCategoryScore;
				
				
				
				 //document.forms["FinancialAnalysisForm"]["DebtServiceCategoryWeight"].value =Balancing;  
                
				//Recalculate and Display Effective Weights =  Total Score / Sub-Category Score
				
				//
				var GrossProfitEffWeight = GrossProfitMarginScore /TotalScore * 100;
				var OperatingProfitEffWeight = OperatingProfitMarginScore/TotalScore * 100;
				var TurnoverGrowthEffWeight = TurnoverGrowthScore/TotalScore * 100;
		        var ROAEffWeight = ReturnOnAssetsScore/TotalScore * 100;
			    var ROIEffWeight = ReturnOnInvestmentsScore/TotalScore * 100;
				var TotalProfitabilityRatiosEffWeight = ProfitabilityCategoryScore/TotalScore * 100;
			
			    //Display effective weights
				document.forms["FinancialAnalysisForm"]["GrossProfitMarginEffectiveWeight"].value = GrossProfitEffWeight;
                document.forms["FinancialAnalysisForm"]["OperatingProfitMarginEffectiveWeight"].value = OperatingProfitEffWeight;
                document.forms["FinancialAnalysisForm"]["TurnoverGrowthEffectiveWeight"].value = TurnoverGrowthEffWeight;
                document.forms["FinancialAnalysisForm"]["ReturnOnAssetsEffectiveWeight"].value = ROAEffWeight;
                document.forms["FinancialAnalysisForm"]["ReturnOnInvestmentsEffectiveWeight"].value = TotalProfitabilityRatiosEffWeight; 		  
		        document.forms["FinancialAnalysisForm"]["TotalProfitabilityRatiosEffectiveWeight"].value = TotalProfitabilityRatiosEffWeight;
           		}
			}
		}
		function RecalculateCapitalStructureRatios(elem)
		{
           if (isNaN(elem.value))
		   {
		     alert ("Please enter numbers only");
			 elem.value =""; 
		   }
           else
		   {
		      var DebtToEquityWeight = Number(document.forms["FinancialAnalysisForm"]["DebtToEquityWeight"].value);
		      var DebtToTangibleNetWorthWeight = Number(document.forms["FinancialAnalysisForm"]["DebtToTangibleNetWorthWeight"].value);
		 	  var TotalCapitalStructureRatiosInputsOnly = DebtToEquityWeight + DebtToTangibleNetWorthWeight;
		      var Balancing = 100 - TotalCapitalStructureRatiosInputsOnly;
			  
			  
			  
			  if (TotalCapitalStructureRatiosInputsOnly > 100)
		      {
		         alert("Total score may not exceed 100%");
				 elem.value = "";
				 
		      }
              else  
			    // Display Total Score;
			  {
			     document.forms["FinancialAnalysisForm"]["ShareholdersFundsToTotalAssetsWeight"].value =Balancing;  
                 TotalScore = ToNumber(localStorage.bfTotalScore);
				 CapitalStructureCategoryScore = ToNumber(document.forms["FinancialAnalysisForm"]["CapitalStructureCategoryScore"].value);
             
				 var DebtToEquityScore = CapitalStructureCategoryScore * DebtToEquityWeight/100;
				 var DebtToTangibleNetWorthScore = CapitalStructureCategoryScore * DebtToTangibleNetWorthWeight/100;
			     var TotalCapitalStructureScoreBeforeLast = DebtToEquityScore + DebtToTangibleNetWorthScore;
				 // The ROI being the last charecteristic is the balancing score so that sum = Total Capital Structure Scores
				 var ShareholdersFundsToTotalAssetsScore = CapitalStructureCategoryScore - TotalCapitalStructureScoreBeforeLast ;
		       
				
				 //Display Total Scores
			     document.forms["FinancialAnalysisForm"]["DebtToEquityScore"].value = DebtToEquityScore;
                 document.forms["FinancialAnalysisForm"]["DebtToTangibleNetWorthScore"].value = DebtToTangibleNetWorthScore;
				 document.forms["FinancialAnalysisForm"]["ShareholdersFundsToTotalAssetsScore"].value = ShareholdersFundsToTotalAssetsScore;
				 document.forms["FinancialAnalysisForm"]["TotalCapitalStructureRatiosScore"].value = CapitalStructureCategoryScore;
				
                
				//Recalculate and Display Effective Weights =  Total Score / Sub-Category Score
				
				DebtToEquityWeight = DebtToEquityScore /TotalScore * 100;
				DebtToTangibleNetWorthWeight = DebtToTangibleNetWorthScore/TotalScore * 100;
				ShareholdersFundsToTotalAssetsWeight = ShareholdersFundsToTotalAssetsScore/TotalScore * 100;
		     	TotalCapitalStructureRatiosWeight = CapitalStructureCategoryScore/TotalScore * 100;
			
			    //Display effective weights
				document.forms["FinancialAnalysisForm"]["DebtToEquityEffectiveWeight"].value = DebtToEquityWeight;
                document.forms["FinancialAnalysisForm"]["DebtToTangibleNetWorthEffectiveWeight"].value = DebtToTangibleNetWorthWeight;
                document.forms["FinancialAnalysisForm"]["ShareholdersFundsToTotalAssetsEffectiveWeight"].value = ShareholdersFundsToTotalAssetsWeight;
                document.forms["FinancialAnalysisForm"]["TotalCapitalStructureRatiosEffectiveWeight"].value = TotalCapitalStructureRatiosWeight; 		  
  }
			}
		}
		function RecalculateDebtServiceRatios(elem)
		{
           if (isNaN(elem.value))
		   {
		     alert ("Please enter numbers only");
			 elem.value =""; 
		   }
           else
		   {
		      var InterestCoverWeight = Number(document.forms["FinancialAnalysisForm"]["InterestCoverWeight"].value);
		      var DebtServiceRatiosInputsOnly = InterestCoverWeight;
		      var Balancing = 100 - DebtServiceRatiosInputsOnly;
			  
			  
			  
			  if (DebtServiceRatiosInputsOnly > 100)
		      {
		         alert("Total score may not exceed 100%");
				 elem.value = "";
				 
		      }
              else  
			    // Display Total Score;
			  {
			     document.forms["FinancialAnalysisForm"]["EBITDAToGrossIntDebtsWeight"].value =Balancing;  
                 TotalScore = ToNumber(localStorage.bfTotalScore);
				 DebtServiceCategoryScore = ToNumber(document.forms["FinancialAnalysisForm"]["CapitalStructureCategoryScore"].value);
             
				 var InterestCoverScore = DebtServiceCategoryScore * InterestCoverWeight/100;
			     var TotalDebtServiceScoreBeforeLast = InterestCoverScore;
				 
				 // The EBITDAToGrossIntDebts being the last charecteristic is the balancing score so that sum = Total Debt Service Scores
				 var EBITDAToGrossIntDebtsScore = DebtServiceCategoryScore - TotalDebtServiceScoreBeforeLast ;
		       
				
				 //Display Total Scores
			     document.forms["FinancialAnalysisForm"]["InterestCoverScore"].value = InterestCoverScore;
                 document.forms["FinancialAnalysisForm"]["EBITDAToGrossIntDebtsScore"].value = EBITDAToGrossIntDebtsScore;
				 document.forms["FinancialAnalysisForm"]["TotalDebtServiceRatiosScore"].value = DebtServiceCategoryScore;
				
                
				//Recalculate and Display Effective Weights =  Total Score / Sub-Category Score
				
				InterestCoverWeight = InterestCoverScore /TotalScore * 100;
				EBITDAToGrossIntDebtsWeight = EBITDAToGrossIntDebtsScore/TotalScore * 100;
		     	TotalDebtServiceRatiosWeight = DebtServiceCategoryScore/TotalScore * 100;
			
			    //Display effective weights
				document.forms["FinancialAnalysisForm"]["InterestCoverEffectiveWeight"].value = InterestCoverWeight;
                document.forms["FinancialAnalysisForm"]["EBITDAToGrossIntDebtsEffectiveWeight"].value = EBITDAToGrossIntDebtsWeight;
                document.forms["FinancialAnalysisForm"]["TotalDebtServiceRatiosEffectiveWeight"].value = TotalDebtServiceRatiosWeight; 		  }
			}
		}
		function bfRecalculate(elem)
		{
           if (isNaN(elem.value))
		   {
		     alert ("Please enter numbers only");
			 elem.value =""; 
		   }
           else
		   {
		      var bfFinancialAnalysis = Number(document.forms["FinancialAnalysisForm"]["bfFinancialAnalysisPercentage"].value);
		      var bfManagementAnalysis = Number(document.forms["FinancialAnalysisForm"]["bfManagementAnalysisPercentage"].value);
		      var bfIndustryAnalysis = Number(document.forms["FinancialAnalysisForm"]["bfIndustryAnalysisPercentage"].value);
		      var bfShareholderAnalysis = Number(document.forms["FinancialAnalysisForm"]["bfShareholderAnalysisPercentage"].value);
		      var bfEstablishmentAnalysis = Number(document.forms["FinancialAnalysisForm"]["bfEstablishmentAnalysisPercentage"].value);
			  var bfTotalPercentage = bfFinancialAnalysis + bfManagementAnalysis + bfIndustryAnalysis + bfShareholderAnalysis + bfEstablishmentAnalysis;
		      var bfTotalScore = Number(document.forms["FinancialAnalysisForm"]["bfTotalScore"].value);
	
			  //var bfBalancing = 100 - bfTotalPercentage;
			  
			  
			  if (bfTotalPercentage > 100)
		      {
		         alert("Total score may not exceed 100%");
				 elem.value = "";
				 
		      }
              else  
			    // Display Total Score;
			  {
			    document.forms["FinancialAnalysisForm"]["bfTotalPercentage"].value = bfTotalPercentage;  
                document.forms["FinancialAnalysisForm"]["bfFinancialAnalysisScore"].value = bfTotalScore * bfFinancialAnalysis / 100;
                document.forms["FinancialAnalysisForm"]["bfManagementAnalysisScore"].value = bfTotalScore * bfManagementAnalysis / 100;
		        document.forms["FinancialAnalysisForm"]["bfIndustryAnalysisScore"].value = bfTotalScore * bfIndustryAnalysis / 100;
				document.forms["FinancialAnalysisForm"]["bfShareholderAnalysisScore"].value = bfTotalScore * bfShareholderAnalysis / 100;
				document.forms["FinancialAnalysisForm"]["bfShareholderAnalysisScore"].value = bfTotalScore * bfShareholderAnalysis / 100;
	    		document.forms["FinancialAnalysisForm"]["bfShareholderAnalysisScore"].value = bfTotalScore * bfShareholderAnalysis / 100;
	    		document.forms["FinancialAnalysisForm"]["bfShareholderAnalysisScore"].value = bfTotalScore * bfShareholderAnalysis / 100;
	    		document.forms["FinancialAnalysisForm"]["bfShareholderAnalysisScore"].value = bfTotalScore * bfShareholderAnalysis / 100;
	    		document.forms["FinancialAnalysisForm"]["bfShareholderAnalysisScore"].value = bfTotalScore * bfShareholderAnalysis / 100;
	            // Updata Small Firms Total Score = Big Firm Total Score
				if (elem.name=="bfTotalScore")
				{
				  document.forms["FinancialAnalysisForm"]["sfTotalScore"].value = elem.value;
	            }
				document.forms["FinancialAnalysisForm"]["bfEstablishmentAnalysisScore"].value = bfTotalScore * bfEstablishmentAnalysis / 100;
			    //document.forms["FinancialAnalysisForm"]["bfEstablishmentAnalysisPercentage"].value = bfBalancing;
			  }
			}
		}
		
		function sfRecalculate(elem)
		{
           if (isNaN(elem.value))
		   {
		     alert ("Please enter numbers only");
			 elem.value =""; 
		   }
           else
		   {
		      
			  var sfFinancialAnalysis = Number(document.forms["FinancialAnalysisForm"]["sfFinancialAnalysisPercentage"].value);
		      var sfManagementAnalysis = Number(document.forms["FinancialAnalysisForm"]["sfManagementAnalysisPercentage"].value);
		      var sfIndustryAnalysis = Number(document.forms["FinancialAnalysisForm"]["sfIndustryAnalysisPercentage"].value);
		      var sfShareholderAnalysis = Number(document.forms["FinancialAnalysisForm"]["sfShareholderAnalysisPercentage"].value);
		      var sfEstablishmentAnalysis = Number(document.forms["FinancialAnalysisForm"]["sfEstablishmentAnalysisPercentage"].value);
			  var sfTotalPercentage = sfFinancialAnalysis + sfManagementAnalysis + sfIndustryAnalysis + sfShareholderAnalysis + sfEstablishmentAnalysis;
		      var sfTotalScore = Number(document.forms["FinancialAnalysisForm"]["sfTotalScore"].value);
	
			  //var sfBalancing = 100 - sfTotalPercentage;
			  
			  
			  if (sfTotalPercentage > 100)
		      {
		         alert("Total score may not exceed 100%");
				 elem.value = "";
				 
		      }
              else  
			    // Display Total Score;
			  {
			    document.forms["FinancialAnalysisForm"]["sfTotalPercentage"].value = sfTotalPercentage;  
                document.forms["FinancialAnalysisForm"]["sfFinancialAnalysisScore"].value = sfTotalScore * sfFinancialAnalysis / 100;
                document.forms["FinancialAnalysisForm"]["sfManagementAnalysisScore"].value = sfTotalScore * sfManagementAnalysis / 100;
		        document.forms["FinancialAnalysisForm"]["sfIndustryAnalysisScore"].value = sfTotalScore * sfIndustryAnalysis / 100;
				document.forms["FinancialAnalysisForm"]["sfShareholderAnalysisScore"].value = sfTotalScore * sfShareholderAnalysis / 100;
				document.forms["FinancialAnalysisForm"]["sfEstablishmentAnalysisScore"].value = sfTotalScore * sfEstablishmentAnalysis / 100;
			   
			     
  
                //document.forms["FinancialAnalysisForm"]["sfEstablishmentAnalysisPercentage"].value = sfBalancing;
			  }
			}
		}
		
		
    </script>
</head>
<body>
   <form id = "FinancialAnalysisForm">
   <Table Border = 2 border-style = 2 align = center>
      <tr bgcolor = blue color = white>
C	       <th colspan = 3><h1>FINANCIAL ANALYSIS SETTINGS<h1></td>
		   
	  </tr>
	  <tr>
	      <td style = "vertical-align:top" >
		      <table Border = 0 border-style = 2 align = top >
   			     <tr> <td><strong>Big Firms Calibration<strong></td> 
				      <td></td>
					  <td></td>
				 </tr> 
				 <tr> <td></td>
				      <td colspan = 2  align = center>BIG FIRMS</td> 
				  </tr>
				 <tr> 
				      <td></td>
					  <td align = center><strong>%<strong></td>
					  <td><strong>Score<strong></td>
				 </tr>
				 <tr> 
				      <td><strong>Total Scores<strong></td>
					  <td><input style = "text-align:right;
										  color:white;
										  background-color:blue" 
								 size = "1" type = text readonly name = "bfTotalPercentage" value = "100" onchange="bfRecalculate(this)">
					  </td>
					  <td align = right bgcolor = "blue" color = white >
					      <input size = "1" type = text name = "bfTotalScore" onchange="bfRecalculate(this)">
					  </td>
				 </tr>
				 <tr> 
				      <td><strong>Made up of:</td>
					  <td></td><td></td>
				 </tr>
				 <tr> 
				      <td><a href ="FinancialAnalysis.htm">Financial Analysis</a></td>
					  <td><input size = "1" type = text name = "bfFinancialAnalysisPercentage" onchange="bfRecalculate(this)"></td>
					  <td><input style = "text-align:right;
										  color:white;
										  background-color:grey"
								readonly size = "1" type = text name = "bfFinancialAnalysisScore">
					  </td>
				 </tr>
				 <tr> 
				      <td><a href = "ManagementAnalysis.htm"> Management Analysis </a></td>
					  <td><input size = "1" type = text name = "bfManagementAnalysisPercentage" onchange="bfRecalculate(this)"></td>
					  <td><input style = "text-align:right;
										  color:white;
										  background-color:grey"
								 readonly size = "1" type = text name = "bfManagementAnalysisScore"></td>
				 </tr>
				 <tr> 
				      <td><a href = "IndustryAnalysis.htm">Industry Analysis</a></td>
					  <td><input size = "1" type = text name = "bfIndustryAnalysisPercentage" onchange="bfRecalculate(this)" ></td>
					  <td><input style = "text-align:right;
										  color:white;
										  background-color:grey"
								 readonly size = "1" type = text name = "bfIndustryAnalysisScore"></td>
				 </tr>
			    <tr> 
				      <td><a href = "ManagementAnalysis.htm">Shareholder Analysis</a></td>
					  <td><input size = "1" type = text name = "bfShareholderAnalysisPercentage" onchange="bfRecalculate(this)"></td>
					  <td><input style = "text-align:right;
										  color:white;
										  background-color:grey"
								 readonly size = "1" type = text name = "bfShareholderAnalysisScore"></td>
				</tr>
				<tr> 
				      <td><a href = "EstablishmentAnalysis.htm">Establishment Analysis (Balancing)</a></td>
					  <td><input size = "1" type = text name = "bfEstablishmentAnalysisPercentage" onchange="bfRecalculate(this)"></td>
					  <td><input style = "text-align:right;
										  color:white;
										  background-color:grey"
								 readonly size = "1" type = text name = "bfEstablishmentAnalysisScore"></td>
				 </tr>
				 <tr>
	                <td></td>
	                <td> <Button type = submit name = "BtnSave" onclick = "SaveData()">Save</Button> </td>
	             </tr>
		         <!-Markup for small tables>
   			     <tr> <td><strong>Small Firms Calibration<strong></td> 
				      <td></td>
					  <td></td>
				 </tr> 
				 <tr> <td></td>
				      <td colspan = 2  align = center>SMALL FIRMS</td> 
				  </tr>
				 <tr> 
				      <td></td>
					  <td align = center><strong>%<strong></td>
					  <td><strong>Score<strong></td>
				 </tr>
				 <tr> 
				      <td><strong>Total Scores<strong></td>
					  <td><input style = "text-align:right;
										  color:white;
										  background-color:blue" 
								 size = "1" type = text readonly name = "sfTotalPercentage" value = "100" onchange="sfRecalculate(this)">
					  </td>
					  <td align = right bgcolor = "blue" color = white >
					      <input size = "1" type = text name = "sfTotalScore" onchange="sfRecalculate(this)">
					  </td>
				 </tr>
				 <tr> 
				      <td><strong>Made up of:</td>
					  <td></td><td></td>
				 </tr>
				 <tr> 
				      <td><a href ="FinancialAnalysis.htm">Financial Analysis</a></td>
					  <td><input size = "1" type = text name = "sfFinancialAnalysisPercentage" onchange="sfRecalculate(this)"></td>
					  <td><input style = "text-align:right;
										  color:white;
										  background-color:grey"
								readonly size = "1" type = text name = "sfFinancialAnalysisScore">
					  </td>
				 </tr>
				 <tr> 
				      <td><a href = "ManagementAnalysis.htm"> Management Analysis </a></td>
					  <td><input size = "1" type = text name = "sfManagementAnalysisPercentage" onchange="sfRecalculate(this)"></td>
					  <td><input style = "text-align:right;
										  color:white;
										  background-color:grey"
								 readonly size = "1" type = text name = "sfManagementAnalysisScore"></td>
				 </tr>
				 <tr> 
				      <td><a href = "IndustryAnalysis.htm">Industry Analysis</a></td>
					  <td><input size = "1" type = text name = "sfIndustryAnalysisPercentage" onchange="sfRecalculate(this)" ></td>
					  <td><input style = "text-align:right;
										  color:white;
										  background-color:grey"
								 readonly size = "1" type = text name = "sfIndustryAnalysisScore"></td>
				 </tr>
			    <tr> 
				      <td><a href = "ManagementAnalysis.htm">Shareholder Analysis</a></td>
					  <td><input size = "1" type = text name = "sfShareholderAnalysisPercentage" onchange="sfRecalculate(this)"></td>
					  <td><input style = "text-align:right;
										  color:white;
										  background-color:grey"
								 readonly size = "1" type = text name = "sfShareholderAnalysisScore"></td>
				</tr>
				<tr> 
				      <td><a href = "EstablishmentAnalysis.htm">Establishment Analysis (Balancing)</a></td>
					  <td><input size = "1" type = text name = "sfEstablishmentAnalysisPercentage" onchange="sfRecalculate(this)"></td>
					  <td><input style = "text-align:right;
										  color:white;
										  background-color:grey"
								 readonly size = "1" type = text name = "sfEstablishmentAnalysisScore"></td>
				 </tr>
				 <tr>
	                <td></td>
	                <td> <Button type = submit name = "BtnSave" onclick = "SaveData()">Save</Button> </td>
	             </tr>
			  
 				 
			  </table>
		  </td>
		  <!-Gap>
		  <td><table Border = 1 Bordercolor = yellow> <tr> <td color=white></td> </tr> </Table> </td> 
		  
			
		  <td align = top>
			      <table align = top>
				     <tr style = "background-color:powderblue;text-align:center">
					    <td style = "text-align:left">
						   <br> <strong>FINANCIAL ANALYSIS RATIOS<strong>
						</td>
						<td>
						   <strong>%<br> Weight<strong>
						</td>
						<td>
						   <strong>Effective<br>Weight<strong>
						</td>
						<td>
						   <strong>Score<br>Allocation<strong>
						</td>
					 </tr>
					 <tr>
					    <td>Liquidity</td>
						<td><input style = "align:center" type = text name = "LiquidityCategoryWeight" Size = 1 onchange = "RecalculateFinancialAnalysisWeights(this)"></td>
                        <td><input type = text name = "LiquidityCategoryEffectiveWeight" Size = 1 readonly></td>
					    <td><input type = text name = "LiquidityCategoryScore" Size = 1 readonly></td>
					  </tr>
					  <tr>
					    <td>Profitability</td>
						<td><input type = text name = "ProfitabilityCategoryWeight" Size = 1 onchange = "RecalculateFinancialAnalysisWeights(this)"></td>
						<td><input type = text name = "ProfitabilityCategoryEffectiveWeight" Size = 1 readonly></td>
						<td><input type = text name = "ProfitabilityCategoryScore" Size = 1 readonly></td>
					   </tr>
					   <tr>
	                    <td>Capital Structure</td>
						<td><input type = text name = "CapitalStructureCategoryWeight" Size = 1 onchange = "RecalculateFinancialAnalysisWeights(this)"></td>
						<td><input type = text name = "CapitalStructureCategoryEffectiveWeight" Size = 1 readonly></td>
						<td><input type = text name = "CapitalStructureCategoryScore" Size = 1 readonly></td>
						</tr>
					   <tr> 
				        <td>Debt Service (Balancing)</td>
						<td><input type = text name = "DebtServiceCategoryWeight" Size = 1 value = 100 readonly></td>
						<td><input type = text name = "DebtServiceCategoryEffectiveWeight" Size = 1 readonly></td>
						<td><input type = text name = "DebtServiceCategoryScore" Size = 1 readonly></td>
					   </tr>
					   <tr>
					     <td>TOTAL</td>
						 <td><input type = text name = "TotalFinancialAnalysisCategoryWeight" Size = 1 value = 100 readonly></td>
						 <td><input type = text name = "TotalFinancialAnalysisCategoryEffectiveWeight" Size = 1 readonly"></td>
						 <td><input type = text name = "TotalFinancialAnalysisCategoryScore" Size = 1 readonly></td>
					    </tr
						<tr></tr>
						<tr>
						   <td><strong>Drilled Down As Follows:<strong></td>
						</tr>
						
						<tr>
					     <td colspan = 4>---------------------------------------------------------------------------------------</td>
					    </tr>
						<!-- Level 3 Definitions -->
                       <tr></tr>	   
				        <tr style = "background-color:lightgrey" >
					        <td><strong>Liquidity Ratios </strong></td>	
					    </tr>
					    <tr>
					        <td>Current Ratio</td>
						    <td><input type = text name = "CurrentRatioWeight" Size = 1 onchange = RecalculateLiquidityRatios(this)></td>
							<td><input type = text name = "CurrentRatioEffectiveWeight" Size = 1 readonly></td>
							<td><input type = text name = "CurrentRatioScore" Size = 1 readonly></td>
					    </tr>
					    <tr>
					         <td>Debtor Days</td>
						     <td><input type = text name = "DebtorDaysWeight" Size = 1 onchange = RecalculateLiquidityRatios(this)></td>
							 <td><input type = text name = "DebtorDaysEffectiveWeight" Size = 1 readonly></td>
							 <td><input type = text name = "DebtorDaysScore" Size = 1 readonly></td>
					    </tr>
					    <tr>
	                         <td>Turnover/Working Capital(Balancing)</td>
						     <td><input type = text name = "TurnoverToWorkingCapitalWeight" Size = 1 value = 100 readonly></td>
							 <td><input type = text name = "TurnoverToWorkingCapitalEffectiveWeight" Size = 1 readonly></td>
							 <td><input type = text name = "TurnoverToWorkingCapitalScore" Size = 1 readonly></td>
					    </tr>
					    <tr>
					         <td>TOTAL</td>
						     <td><input type = text name = "TotalLiquidityRatiosWeight" Size = 1 value = 100 readonly></td>
							 <td><input type = text name = "TotalLiquidityRatiosEffectiveWeight" Size = 1 readonly></td>
							 <td><input type = text name = "TotalLiquidityRatiosScore" Size = 1 readonly></td>
					    </tr>
						<tr>
					     <td colspan = 4>---------------------------------------------------------------------------------------</td>
					    </tr>
				        <tr></tr>
						<tr style = "background-color:lightgrey">
					        <td><strong>Profitability Ratios </strong></td>
					    </tr>
					    <tr>
					        <td>Gross Profit Ratio</td>
						    <td><input type = text name = "GrossProfitMarginWeight" onchange = "RecalculateProfitabilityRatios(this)" Size = 1</td>
							<td><input type = text name = "GrossProfitMarginEffectiveWeight" Size = 1 readonly></td>
							<td><input type = text name = "GrossProfitMarginScore" Size = 1 readonly></td>
					    </tr>
					    <tr>
					         <td>Operating Profit Margin</td>
						     <td><input type = text name = "OperatingProfitMarginWeight" Size = 1 onchange = "RecalculateProfitabilityRatios(this)"></td>
							 <td><input type = text name = "OperatingProfitMarginEffectiveWeight" Size = 1 readonly></td>
							 <td><input type = text name = "OperatingProfitMarginScore" Size = 1 readonly></td>
					    </tr>
					    <tr>
	                         <td>Turnover Growth</td>
						     <td><input type = text name = "TurnoverGrowthWeight" Size = 1 onchange = "RecalculateProfitabilityRatios(this)"></td>
							 <td><input type = text name = "TurnoverGrowthEffectiveWeight" Size = 1 readonly></td>
							 <td><input type = text name = "TurnoverGrowthScore" Size = 1 readonly></td>
						</tr>
						<tr>
	                         <td>Return On Assets</td>
						     <td><input type = text name = "ReturnOnAssetsWeight" Size = 1 onchange = "RecalculateProfitabilityRatios(this)"></td>
							 <td><input type = text name = "ReturnOnAssetsEffectiveWeight" Size = 1 readonly></td>
							 <td><input type = text name = "ReturnOnAssetsScore" Size = 1 readonly></td>
						</tr>
						<tr>
	                         <td>Return On Investments (Balancing)</td>
						     <td><input type = text name = "ReturnOnInvestmentsWeight" Size = 1 readonly></td>
							 <td><input type = text name = "ReturnOnInvestmentsEffectiveWeight" Size = 1 readonly></td>
							 <td><input type = text name = "ReturnOnInvestmentsScore" Size = 1 readonly></td>
						</tr>
					    <tr>
					         <td>TOTAL</td>
						     <td>
						         <input type = text name = "TotalProfitabilityRatiosWeight" value = 100 Size = 1 readonly">
								 <td><input type = text name = "TotalProfitabilityRatiosEffectiveWeight" Size = 1 readonly></td>
							     <td><input type = text name = "TotalProfitabilityRatiosScore" Size = 1 readonly></td>
						     </td>
					    </tr>
						<tr>
					     <td colspan = 4>---------------------------------------------------------------------------------------</td>
					    </tr>
				        <tr></tr>
						<tr style = "background-color:lightgrey">
					        <td><strong>Capital Structure Ratios </strong></td>
					    </tr>
					    <tr>
					        <td>Debt/Equity</td>
						    <td><input type = text name = "DebtToEquityWeight" Size = 1 onchange = "RecalculateCapitalStructureRatios(this)"></td>
							<td><input type = text name = "DebtToEquityEffectiveWeight" Size = 1 readonly></td>
							<td><input type = text name = "DebtToEquityScore" Size = 1 readonly></td>
					    </tr>
					    <tr>
					         <td>Debt/Tangible Net Worth</td>
						     <td><input type = text name = "DebtToTangibleNetWorthWeight" Size = 1 onchange = "RecalculateCapitalStructureRatios(this)"</td>
							 <td><input type = text name = "DebtToTangibleNetWorthEffectiveWeight" Size = 1 readonly></td>
							 <td><input type = text name = "DebtToTangibleNetWorthScore" Size = 1 readonly></td>
					    </tr>
					    <tr>
					         <td>Shareholders Funds/Total Assets(Balancing)</td>     
						     <td><input type = text name = "ShareholdersFundsToTotalAssetsWeight" Size = 1 readonly</td>
							 <td><input type = text name = "ShareholdersFundsToTotalAssetsEffectiveWeight" Size = 1 readonly></td>
							 <td><input type = text name = "ShareholdersFundsToTotalAssetsScore" Size = 1 readonly></td>
					    </tr>
					 
						<tr>
					         <td>TOTAL</td>
						     <td><input type = text name = "TotalCapitalStructureRatiosWeight" Size = 1 value = 100></td>
							 <td><input type = text name = "TotalCapitalStructureRatiosEffectiveWeight" Size = 1></td>
							 <td><input type = text name = "TotalCapitalStructureRatiosScore" Size = 1 readonly></td>  
					    </tr>
						<tr>
					     <td colspan = 4>---------------------------------------------------------------------------------------</td>
					    </tr>
						<tr style = "background-color:lightgrey">
					        <td><strong>Debt Service Ratios </strong></td>
					    </tr>
					    <tr>
					        <td>Interest Cover</td>
						    <td><input type = text name = "InterestCoverWeight" Size = 1 onchange = "RecalculateDebtServiceRatios(this)"></td>
							<td><input type = text name = "InterestCoverEffectiveWeight" Size = 1></td>
							<td><input type = text name = "InterestCoverScore" Size = 1></td>
					    </tr>
					    <tr>
					         <td>EBITDA/Gross Interest Earning Debts (Balancing)</td>
						     <td><input type = text name = "EBITDAToGrossIntDebtsWeight" Size = 1 readonly></td>
							 <td><input type = text name = "EBITDAToGrossIntDebtsEffectiveWeight" Size = 1 readonly></td>
							 <td><input type = text name = "EBITDAToGrossIntDebtsScore" Size = 1 readonly></td>
					    </tr>
					    <tr>
					         <td>TOTAL</td>
						     <td><input type = text name = "TotalDebtServiceRatiosWeight" Size = 1 value = 100 readonly></td>
							 <td><input type = text name = "TotalDebtServiceRatiosEffectiveWeight" Size = 1 readonly></td>
							 <td><input type = text name = "TotalDebtServiceRatiosScore" Size = 1 readonly></td>
					    </tr>
								  
					</td>
			      </table>
			</td>
			 
			
		  </tr> 
		</Table> 
		  </td></td>              
	  </tr>
	 
   </Table>
   </form>
</body>

</html>